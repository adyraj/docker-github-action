name: Deploy to ECR

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Create repository
        env:
          ECR_REPOSITORY: test_repo
        run: |
          aws ecr create-repository --repository-name test_repo1 > /dev/null
          aws ecr create-repository --repository-name test_repo2 > /dev/null

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        if: always()

      - name: Build, tag, and push image to Amazon ECR
        if: always()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: test_repo1
          IMAGE_TAG: latest
        run: |
          docker build --file docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push image to Amazon ECR
        if: always()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: test_repo2
          IMAGE_TAG: latest
        run: |
          docker build --file docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # terraform:
  #   name: "Terraform"
  #   needs: [check, build]
  #   if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         terraform_version: 1.0.10
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init

  #     - name: Terraform Format
  #       id: fmt
  #       run: terraform fmt -check

  #     # - name: Terraform Init
  #     #   id: init
  #     #   run: terraform init

  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform Plan
  #       id: plan
  #       if: github.event_name == 'pull_request'
  #       run: terraform plan -no-color
  #       continue-on-error: true

  #     # - uses: actions/github-script@0.9.0
  #     #   if: github.event_name == 'pull_request'
  #     #   env:
  #     #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #     #   with:
  #     #     github-token: ${{ secrets.GITHUB_TOKEN }}
  #     #     script: |
  #     #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #     #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #     #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
  #     #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

  #     #       <details><summary>Show Plan</summary>

  #     #       \`\`\`\n
  #     #       ${process.env.PLAN}
  #     #       \`\`\`

  #     #       </details>

  #     #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

  #     #       github.issues.createComment({
  #     #         issue_number: context.issue.number,
  #     #         owner: context.repo.owner,
  #     #         repo: context.repo.repo,
  #     #         body: output
  #     #       })

  #     # - name: Terraform Plan Status
  #     #   if: steps.plan.outcome == 'failure'
  #     #   run: exit 1

  #     - name: Terraform Apply
  #       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #       run: terraform apply -auto-approve
